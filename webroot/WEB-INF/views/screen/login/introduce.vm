<h><font size="6px">表单提交和表单校验</font></h><br/><br/>
这一部分使用注册、登录、验证码作为例子来讲解表单提交、表单校验。<br/><br/>
<details open>
    <summary>
        <h><font size="5px">表单提交</font></h>
    </summary>
    <br/>
    <div style="margin-left: 5%;">
        向服务器传递参数的方式前面已经介绍过了，而在表单提交方面，有以下几点需要注意：<br/>
        <li>页面上最好使用&#35;springBind的方式进行绑定，这样便于使用BindingResult进行校验和错误回显。使用方法如下例所示：</li>
        <pre><code>
            &lt;tr&gt;
                &lt;th&gt;年龄：&lt;/th&gt;
                &lt;td&gt;
                    &#36;springBind("user.age")
                    &lt;input type="text" id="birthday" name="&#36;{status.expression}" value="&#36;!{status.value}" /&gt;
                    &lt;label class="error"&gt;&#36;{status.errorMessage}&lt;/label&gt;
                &lt;/td&gt;
            &lt;/tr&gt;</code>
        </pre>
        其中，<br/>&#36;springBind("user.age")是绑定语句，可以将下一个input标签的值绑定到user.age上。<br/>
        &#36;{status.expression}可以自动填入所绑定变量的变量会名，如这里会填入'age'。<br/>
        &#36;!{status.value}这个表达式在页面有传入vo对象时，会自动将变量的值填入这里。<br/>
        &#36;{status.errorMessage}服务器上校验返回的BingingResult中的错误信息会在这里显示。<br/><br/>
        <li>另外，常用或者内容较多的表单要创建一个VO对象进行传参，这样便于维护。</li><br/>
    </div>
</details>

<details open>
    <summary>
        <h><font size="5px">表单校验</font></h>
    </summary>
    <br/>
    <div style="margin-left: 5%;">
        表单校验使用的是Validator接口，通过实现Validator接口并使用其validate方法，可以对数据进行校验。<br/>
        以com.eyeieye.melody.demo.web.action.login.UserRegisterAction类中的register方法为例，表单验证的使用方法如下：<br/>
        <li>1、获得校验器，即Validator接口实现类的对象，如本例中的registerValidator。</li>
        <li>2、方法入参中加入BindingResult result这个参数。</li>
        <li>3、使用校验器进行校验，其入参为VO对象和BindingResult，如本例中的：registerValidator.validate(user, result)，校验器会将错误信息写入BindingResult。</li>
        <li>4、根据校验的结果进行其他操作。</li><br/>
    </div>
</details>

<details open>
    <summary>
        <h><font size="5px">验证码</font></h>
    </summary>
    <br/>
    <div style="margin-left: 5%;">
        验证码相关讲解以页面-\login\login.vm 、类-com.eyeieye.melody.demo.web.action.login.UserLoginoutAction 和<br/>类com.eyeieye.melody.demo.web.action.login.CheckCodeAction
        为例进行说明。<br/>
        <br/>
        <li><b>获取验证码</b></li>
        1、Action中：<br/>
        ①参照CheckCodeAction类中的simple方法和arithmetic方法，获取验证码的方法返回值为空，而是通过HttpServletResponse将图片文件返回到页面。<br/>
        ②方法中用Captcha类获取验证码，添加相关参数后通过getImage方法获得图片，并通过ImageIO.write方法返回到页面。<br/>
        ③验证码的答案不能返回到页面，所以需要存储到session中，本例中，在方法入参的时候取得的User对象中写入lastToken，再将User对象写回到cookie，以保证校验时可以得到验证码的答案。<br/>
        <br/>
        2、页面上:<br/>
        在页面上使用img标签，其src为action中获取验证码的url即可。<br/>
        <br/>
        <li><b>验证码的校验</b></li>
        验证码可以通过ajax校验或者直接表单提交校验。<br/>
        在action中从cookie取到验证码答案，与输入内容比较即可。<br/>

    </div>
</details>
<details open>
    <summary>
        <h><font size="5px">示例</font></h>
    </summary>
    <br/>
    <div style="margin-left: 5%;">
        <a href="$appServer.get('/login/ajaxCheck.htm')">ajax校验验证码</a><br/>
        <a href="$appServer.get('/login/register.htm')">用户注册</a><br/>
        <a href="$appServer.get('/login/login.htm')">用户登录</a><br/>

    </div>
</details>